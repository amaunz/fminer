=Fminer (A chemical fragment miner)
This is the official Fminer application. It depends on LibFminer (http://github.com/amaunz/libFminer/tree/master). 
Latest scientific documentation is available from http://github.com/amaunz/Fminer-doc/tree/master.
To create documentation with rdoc, do 'make doc'.

LibFminer implements a method for efficiently mining relevant tree-shaped molecular fragments, each representing a geometrical classes, with minimum frequency and statistical constraints. Experimental results with four test datasets suggest that the approach is able to optimize correlation with chemical endpoints as well as inter-feature entropy. The mined fragments represent classes of fragments sharing a common core structure (backbone). The proposed method reduces feature set sizes and runtime by >90% and >60% compared to ordinary tree mining. Validation with several publicly available carcinogenicity datasets shows that their expressiveness is comparable to the complete set of tree-shaped fragments and is significantly higher than linear fragments.

==File Formats
- Graphs are allowed in SMILES and gSpan format. This is to support both general graph mining, but to also make life more convenient when mining molecular data. For instance, for SMILES formatted input there is a switch to enable/disable aromatic ring perception, which, in gSpan format, requires re-formatting the input.
  
  SMILES file line format is defined by 
    "ID\t SMILES", e.g.:
     1    COC1=CC=C(C=C1)C2=NC(=C([NH]2)C3=CC=CC=C3)C4=CC=CC=C4

  gSpan file block format (see also: http://illimine.cs.uiuc.edu/resources/readme_plain.php?program=gSpan) is defined by:
    "t # ID" means the Nth graph,
    "v M L" means that the Mth vertex in this graph has label L,
    "e P Q L" means that there is an edge connecting the Pth vertex with the Qth vertex. The edge has label L.

- Activity file line format is defined by 
    "ID\t endpoint\t activity", e.g.:
     1    Salmonella Mutagenicity    1

The IDs in gSpan or SMILES format files on one side and activity IDs in activity format files on the other side should match, i.e. relate to each other via the identity function. An injective relation is also allowed, i.e., not every Activity ID must be matched by a graph id.

==Switches (run Fminer w/o arguments for allowable parameter ranges, defaults and explanations):

===Constraint parameters:
- -f Minimum frequency constraint, used for anti-monotonic pruning.
- -l Subgraph type, choices are paths and trees.
- -p Chi-square significance level, used for statistical upper-bound pruning.

===Constraint switches:
- -s Refine fragments with frequency 1.
- -a Disable aromatic ring perception for SMILES input.
- -d Deactivate dynamic adjustment of upper bound (less efficient, use only for performance evaluation). Can only be set when -c is not set.
- -b Switch off mining of only the most significant/most general representative of each backbone.
- -u Deactivate upper bound pruning for chi-square constraint (less efficient, use only for performance evaluation).

===Environment variables:
- Define the FMINER_SMARTS environment variable to produce output in SMARTS format (e.g. export FMINER_SMARTS=1).
- Additionally define the FMINER_LAZAR environment variable to produce output in linfrag format which can be used as input to Lazar (e.g. export FMINER_LAZAR=1).

===Remarks:
- Structures are output to STDOUT in the specified format.
- Output consists of blocks of gSpan graphs.
- When using SMARTS output (FMINER_SMARTS defined), each line is a YAML sequence, containing SMARTS fragment, p-value, and two sequences denoting positive and negative class occurrences (line numbers in Smiles file). When FMINER_LAZAR is set, the linfrag output format is used.

==Licensing information:
Fminer is free software ('free' as in 'freedom', see LICENSE).
Andreas Maunz, 2008.
